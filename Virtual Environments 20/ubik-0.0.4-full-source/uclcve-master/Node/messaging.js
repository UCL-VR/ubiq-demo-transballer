const { TextEncoder, TextDecoder } = require('util');

class Message{
    constructor(){
    }

    static Wrap(data){
        var msg = new Message();
        msg.buffer = data;
        msg.length = data.readInt32LE(0)
        msg.objectid = data.readInt32LE(4)
        msg.componentid = data.readInt32LE(8)
        msg.message = data.slice(12);
        return msg;
    }

    static Create(objectid, componentid, message){
        var msg = new Message();

        if(typeof(message) == 'object'){
            message = JSON.stringify(message);
        }
        if(typeof(message) == 'string'){
            message = Buffer.from(message, 'utf8');
        }

        var length = message.length + 8;
        var buffer = Buffer.alloc(length + 4);

        buffer.writeInt32LE(length, 0);
        buffer.writeInt32LE(objectid, 4);
        buffer.writeInt32LE(componentid, 8);
        message.copy(buffer, 12);

        var msg = new Message();
        msg.buffer = buffer;
        msg.length = length;
        msg.componentid = componentid;
        msg.objectid = objectid;
        msg.message = message;

        return msg;
    }

    toString(){
        return new TextDecoder().decode(this.message);
    }

    toObject(){
        return JSON.parse(this.toString());
    }
}

class Scene{
    constructor(){
        this.components = {};
        this.objects = [];
        this.objects.push(this);
        this.send = function(message){}
    }

    addComponent(component){
        this.components[component.id] = component;
        component.context = this;
    }

    processMessage(message){
        this.objects.forEach(object => {
            if(object.id == message.objectid){
                if(object.components.hasOwnProperty(message.componentid)){
                    object.components[message.componentid].processMessage(message);
                }
            }
        })
    }
}

module.exports = {
    Message,
    Scene
}