using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace Ubik.Dictionaries
{
    /// <summary>
    /// An observable string dictionary that can be serialised to Json by the in-built Unity serialisation.
    /// </summary>
    [Serializable]
    public class SerializableDictionary
    {
        [SerializeField]
        private List<string> keys = new List<string>();

        [SerializeField]
        private List<string> values = new List<string>();

        public string this[string key]
        {
            get
            {
                var index = keys.IndexOf(key);
                if (index < 0)
                {
                    return null;
                }
                else
                {
                    return values[index];
                }
            }
            set
            {
                var index = keys.IndexOf(key);
                if (index < 0)
                {
                    if (value == null || value == "")
                    {
                        return;
                    }

                    keys.Add(key);
                    values.Add(value);
                }
                else
                {
                    if (value == null || value == "")
                    {
                        keys.RemoveAt(index);
                        values.RemoveAt(index);
                    }
                    else
                    {
                        values[index] = value;
                    }
                }
            }
        }

        public bool Update(string key, string value)
        {
            var existing = this[key];
            this[key] = value;
            return existing != value;
        }

        public IEnumerable<KeyValuePair<string, string>> Enumerator
        {
            get
            {
                for (int i = 0; i < keys.Count; i++)
                {
                    yield return new KeyValuePair<string, string>(keys[i], values[i]);
                }
            }
        }

    }

}